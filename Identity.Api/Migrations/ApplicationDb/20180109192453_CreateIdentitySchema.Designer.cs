// <auto-generated />
using Identity.Api.Migrations.ApplicationDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace Identity.Api.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180109192453_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Identity.Api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()")
                        .HasColumnType("nvarchar(256)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(30)");

                    b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                    b.Property<string>("UserName")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("CabinetId")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);
                    b.Property<bool>("Status")
                    .HasColumnType("bit");
                    b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);
                    b.Property<string>("LastName")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);
                    b.Property<string>("Address")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);
                    b.Property<string>("CityId")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);
                    b.Property<string>("SpecialtyId")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);
                    b.Property<string>("Longitude")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);
                    b.Property<string>("Latitude")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()")
                        .HasColumnType("nvarchar(256)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                    .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(256)")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                    .HasColumnType("nvarchar(256)")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                    .HasColumnType("nvarchar(256)")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                    .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Identity.Api.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Identity.Api.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Identity.Api.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Identity.Api.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
